---

# @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbproxy.html
# @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbproxytargetgroup.html
# @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
# @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html

AWSTemplateFormatVersion: 2010-09-09

Parameters:

  NamePrefix:
    Description: A prefix or namespace that can be used for some resources created or accessed by this template.
    Type: String

Resources:

  # @see https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-proxy.howitworks.html#rds-proxy-connecting
  # @see https://aws.amazon.com/blogs/compute/using-amazon-rds-proxy-with-aws-lambda/
  DatabaseProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      DBProxyName: !Sub ${NamePrefix}-rds-proxy
      Auth:
        - AuthScheme: SECRETS
          IAMAuth: REQUIRED
          SecretArn:
            Fn::ImportValue: !Sub ${NamePrefix}-database-proxy-credentials-arn
      DebugLogging: true
      EngineFamily: MYSQL  # Includes Aurora MySQL.
      RequireTLS: true
      RoleArn: !GetAtt DatabaseProxyRole.Arn  # For secrets access.
      VpcSecurityGroupIds:
        - !Ref DatabaseProxySecurityGroup
      VpcSubnetIds: !Split
        - ","
        - Fn::ImportValue: !Sub ${NamePrefix}-restricted-subnet-list

  ProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    Properties:
      DBProxyName: !Ref DatabaseProxy
      TargetGroupName: default  # Must be set to default.
      DBClusterIdentifiers:
        - Fn::ImportValue: !Sub ${NamePrefix}-database-cluster-name
      ConnectionPoolConfigurationInfo:
        ConnectionBorrowTimeout: 120
        MaxConnectionsPercent: 90
        MaxIdleConnectionsPercent: 80

  DatabaseProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${NamePrefix}-database-proxy-security-group
      GroupDescription: RDS Proxy security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp:
            Fn::ImportValue: !Sub ${NamePrefix}-private-subnet-cidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 127.0.0.1/32  # Local loopback; no-op rule to replace the default 0.0.0.0/0.
      VpcId:
        Fn::ImportValue: !Sub ${NamePrefix}-vpc-id
      Tags:
        - Key: Name
          Value: !Sub ${NamePrefix}-database-proxy-security-group

  # @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.IAMPolicy.html
  # @see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-proxy-setup.html#rds-proxy-connecting-iam
  DatabaseProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:

              - Sid: GetSecretValue
                Action:
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:ListSecretVersionIds
                Effect: Allow
                Resource:
                  Fn::ImportValue: !Sub ${NamePrefix}-database-proxy-credentials-arn

              - Sid: DecryptSecretValue
                Action: kms:Decrypt
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub secretsmanager.${AWS::Region}.amazonaws.com
